<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2000" height="1462" onload="init(evt)" viewBox="0 0 2000 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#f8f8f8" offset="5%"/><stop stop-color="#e8e8e8" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1462" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1445.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1890" y="24.00">Search</text><text id="matched" x="1890" y="1445.00"> </text><svg id="frames" x="10" width="1980" total_samples="17"><g><title>alloc::raw_vec::finish_grow (1 samples, 5.88%)</title><rect x="0.0000%" y="1365" width="5.8824%" height="15" fill="rgb(200,50,50)" fg:x="0" fg:w="1"/><text x="0.1500%" y="1375.50">alloc::raw_vec..</text></g><g><title>[[heap]] (2 samples, 11.76%)</title><rect x="0.0000%" y="1381" width="11.7647%" height="15" fill="rgb(200,50,50)" fg:x="0" fg:w="2"/><text x="0.1500%" y="1391.50">[[heap]]</text></g><g><title>crab_engine::deepblue::GameState::get_valid_moves::{{closure}} (1 samples, 5.88%)</title><rect x="5.8824%" y="1365" width="5.8824%" height="15" fill="rgb(246,117,117)" fg:x="1" fg:w="1"/><text x="6.0324%" y="1375.50">crab_engine::d..</text></g><g><title>crab_engine::deepblue::&lt;impl crab_engine::Board&gt;::naive_value (1 samples, 5.88%)</title><rect x="47.0588%" y="229" width="5.8824%" height="15" fill="rgb(250,123,123)" fg:x="8" fg:w="1"/><text x="47.2088%" y="239.50">crab_engine::d..</text></g><g><title>crab_engine::deepblue::GameState::minimax (2 samples, 11.76%)</title><rect x="47.0588%" y="245" width="11.7647%" height="15" fill="rgb(216,73,73)" fg:x="8" fg:w="2"/><text x="47.2088%" y="255.50">crab_engine::deepblue::GameStat..</text></g><g><title>crab_engine::deepblue::GameState::minimax (1 samples, 5.88%)</title><rect x="52.9412%" y="229" width="5.8824%" height="15" fill="rgb(230,94,94)" fg:x="9" fg:w="1"/><text x="53.0912%" y="239.50">crab_engine::d..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (3 samples, 17.65%)</title><rect x="47.0588%" y="341" width="17.6471%" height="15" fill="rgb(238,105,105)" fg:x="8" fg:w="3"/><text x="47.2088%" y="351.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 17.65%)</title><rect x="47.0588%" y="325" width="17.6471%" height="15" fill="rgb(205,58,58)" fg:x="8" fg:w="3"/><text x="47.2088%" y="335.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 17.65%)</title><rect x="47.0588%" y="309" width="17.6471%" height="15" fill="rgb(207,60,60)" fg:x="8" fg:w="3"/><text x="47.2088%" y="319.50">core::ops::function::impls::&lt;impl core::ops::fu..</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (3 samples, 17.65%)</title><rect x="47.0588%" y="293" width="17.6471%" height="15" fill="rgb(229,92,92)" fg:x="8" fg:w="3"/><text x="47.2088%" y="303.50">core::iter::adapters::filter::filter_fold::{{cl..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 17.65%)</title><rect x="47.0588%" y="277" width="17.6471%" height="15" fill="rgb(254,129,129)" fg:x="8" fg:w="3"/><text x="47.2088%" y="287.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>crab_engine::deepblue::GameState::minimax::{{closure}} (3 samples, 17.65%)</title><rect x="47.0588%" y="261" width="17.6471%" height="15" fill="rgb(246,117,117)" fg:x="8" fg:w="3"/><text x="47.2088%" y="271.50">crab_engine::deepblue::GameState::minimax::{{cl..</text></g><g><title>crab_engine::deepblue::GameState::move_piece (1 samples, 5.88%)</title><rect x="58.8235%" y="245" width="5.8824%" height="15" fill="rgb(204,57,57)" fg:x="10" fg:w="1"/><text x="58.9735%" y="255.50">crab_engine::d..</text></g><g><title>crab_engine::Board::move_piece (1 samples, 5.88%)</title><rect x="58.8235%" y="229" width="5.8824%" height="15" fill="rgb(244,115,115)" fg:x="10" fg:w="1"/><text x="58.9735%" y="239.50">crab_engine::B..</text></g><g><title>crab_engine::Board::can_move (1 samples, 5.88%)</title><rect x="58.8235%" y="213" width="5.8824%" height="15" fill="rgb(249,122,122)" fg:x="10" fg:w="1"/><text x="58.9735%" y="223.50">crab_engine::B..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 5.88%)</title><rect x="58.8235%" y="197" width="5.8824%" height="15" fill="rgb(217,75,75)" fg:x="10" fg:w="1"/><text x="58.9735%" y="207.50">core::iter::tr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="58.8235%" y="181" width="5.8824%" height="15" fill="rgb(204,57,57)" fg:x="10" fg:w="1"/><text x="58.9735%" y="191.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="58.8235%" y="165" width="5.8824%" height="15" fill="rgb(207,60,60)" fg:x="10" fg:w="1"/><text x="58.9735%" y="175.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="58.8235%" y="149" width="5.8824%" height="15" fill="rgb(247,119,119)" fg:x="10" fg:w="1"/><text x="58.9735%" y="159.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 5.88%)</title><rect x="58.8235%" y="133" width="5.8824%" height="15" fill="rgb(206,59,59)" fg:x="10" fg:w="1"/><text x="58.9735%" y="143.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 5.88%)</title><rect x="58.8235%" y="117" width="5.8824%" height="15" fill="rgb(207,61,61)" fg:x="10" fg:w="1"/><text x="58.9735%" y="127.50">alloc::vec::Ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 5.88%)</title><rect x="58.8235%" y="101" width="5.8824%" height="15" fill="rgb(243,113,113)" fg:x="10" fg:w="1"/><text x="58.9735%" y="111.50">alloc::vec::Ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 5.88%)</title><rect x="58.8235%" y="85" width="5.8824%" height="15" fill="rgb(201,51,51)" fg:x="10" fg:w="1"/><text x="58.9735%" y="95.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 5.88%)</title><rect x="58.8235%" y="69" width="5.8824%" height="15" fill="rgb(204,56,56)" fg:x="10" fg:w="1"/><text x="58.9735%" y="79.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 5.88%)</title><rect x="58.8235%" y="53" width="5.8824%" height="15" fill="rgb(231,95,95)" fg:x="10" fg:w="1"/><text x="58.9735%" y="63.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 5.88%)</title><rect x="58.8235%" y="37" width="5.8824%" height="15" fill="rgb(207,60,60)" fg:x="10" fg:w="1"/><text x="58.9735%" y="47.50">alloc::raw_vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 5.88%)</title><rect x="64.7059%" y="309" width="5.8824%" height="15" fill="rgb(226,88,88)" fg:x="11" fg:w="1"/><text x="64.8559%" y="319.50">alloc::vec::Ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 5.88%)</title><rect x="64.7059%" y="293" width="5.8824%" height="15" fill="rgb(238,105,105)" fg:x="11" fg:w="1"/><text x="64.8559%" y="303.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 5.88%)</title><rect x="64.7059%" y="277" width="5.8824%" height="15" fill="rgb(235,101,101)" fg:x="11" fg:w="1"/><text x="64.8559%" y="287.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 5.88%)</title><rect x="64.7059%" y="261" width="5.8824%" height="15" fill="rgb(208,62,62)" fg:x="11" fg:w="1"/><text x="64.8559%" y="271.50">alloc::raw_vec..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="709" width="35.2941%" height="15" fill="rgb(224,85,85)" fg:x="7" fg:w="6"/><text x="41.3265%" y="719.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="693" width="35.2941%" height="15" fill="rgb(221,80,80)" fg:x="7" fg:w="6"/><text x="41.3265%" y="703.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="677" width="35.2941%" height="15" fill="rgb(243,113,113)" fg:x="7" fg:w="6"/><text x="41.3265%" y="687.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (6 samples, 35.29%)</title><rect x="41.1765%" y="661" width="35.2941%" height="15" fill="rgb(245,116,116)" fg:x="7" fg:w="6"/><text x="41.3265%" y="671.50">core::iter::adapters::filter_map::filter_map_fold::{{closure}}</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (6 samples, 35.29%)</title><rect x="41.1765%" y="645" width="35.2941%" height="15" fill="rgb(220,79,79)" fg:x="7" fg:w="6"/><text x="41.3265%" y="655.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fo..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="629" width="35.2941%" height="15" fill="rgb(208,62,62)" fg:x="7" fg:w="6"/><text x="41.3265%" y="639.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6 samples, 35.29%)</title><rect x="41.1765%" y="613" width="35.2941%" height="15" fill="rgb(200,51,51)" fg:x="7" fg:w="6"/><text x="41.3265%" y="623.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (6 samples, 35.29%)</title><rect x="41.1765%" y="597" width="35.2941%" height="15" fill="rgb(246,117,117)" fg:x="7" fg:w="6"/><text x="41.3265%" y="607.50">core::iter::adapters::filter::filter_fold::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6 samples, 35.29%)</title><rect x="41.1765%" y="581" width="35.2941%" height="15" fill="rgb(240,108,108)" fg:x="7" fg:w="6"/><text x="41.3265%" y="591.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>crab_engine::deepblue::GameState::minimax::{{closure}} (6 samples, 35.29%)</title><rect x="41.1765%" y="565" width="35.2941%" height="15" fill="rgb(243,113,113)" fg:x="7" fg:w="6"/><text x="41.3265%" y="575.50">crab_engine::deepblue::GameState::minimax::{{closure}}</text></g><g><title>crab_engine::deepblue::GameState::minimax (6 samples, 35.29%)</title><rect x="41.1765%" y="549" width="35.2941%" height="15" fill="rgb(214,71,71)" fg:x="7" fg:w="6"/><text x="41.3265%" y="559.50">crab_engine::deepblue::GameState::minimax</text></g><g><title>crab_engine::deepblue::maxormin (6 samples, 35.29%)</title><rect x="41.1765%" y="533" width="35.2941%" height="15" fill="rgb(216,74,74)" fg:x="7" fg:w="6"/><text x="41.3265%" y="543.50">crab_engine::deepblue::maxormin</text></g><g><title>core::iter::traits::iterator::Iterator::max (6 samples, 35.29%)</title><rect x="41.1765%" y="517" width="35.2941%" height="15" fill="rgb(222,82,82)" fg:x="7" fg:w="6"/><text x="41.3265%" y="527.50">core::iter::traits::iterator::Iterator::max</text></g><g><title>core::iter::traits::iterator::Iterator::max_by (6 samples, 35.29%)</title><rect x="41.1765%" y="501" width="35.2941%" height="15" fill="rgb(227,90,90)" fg:x="7" fg:w="6"/><text x="41.3265%" y="511.50">core::iter::traits::iterator::Iterator::max_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (6 samples, 35.29%)</title><rect x="41.1765%" y="485" width="35.2941%" height="15" fill="rgb(249,122,122)" fg:x="7" fg:w="6"/><text x="41.3265%" y="495.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="469" width="35.2941%" height="15" fill="rgb(223,83,83)" fg:x="7" fg:w="6"/><text x="41.3265%" y="479.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="453" width="35.2941%" height="15" fill="rgb(233,98,98)" fg:x="7" fg:w="6"/><text x="41.3265%" y="463.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="437" width="35.2941%" height="15" fill="rgb(245,116,116)" fg:x="7" fg:w="6"/><text x="41.3265%" y="447.50">&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="421" width="35.2941%" height="15" fill="rgb(214,71,71)" fg:x="7" fg:w="6"/><text x="41.3265%" y="431.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fo..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="405" width="35.2941%" height="15" fill="rgb(206,59,59)" fg:x="7" fg:w="6"/><text x="41.3265%" y="415.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="389" width="35.2941%" height="15" fill="rgb(208,62,62)" fg:x="7" fg:w="6"/><text x="41.3265%" y="399.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 35.29%)</title><rect x="41.1765%" y="373" width="35.2941%" height="15" fill="rgb(251,124,124)" fg:x="7" fg:w="6"/><text x="41.3265%" y="383.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (6 samples, 35.29%)</title><rect x="41.1765%" y="357" width="35.2941%" height="15" fill="rgb(229,92,92)" fg:x="7" fg:w="6"/><text x="41.3265%" y="367.50">core::iter::adapters::filter_map::filter_map_fold::{{closure}}</text></g><g><title>crab_engine::deepblue::GameState::get_valid_moves::{{closure}} (2 samples, 11.76%)</title><rect x="64.7059%" y="341" width="11.7647%" height="15" fill="rgb(233,98,98)" fg:x="11" fg:w="2"/><text x="64.8559%" y="351.50">crab_engine::deepblue::GameStat..</text></g><g><title>crab_engine::Board::can_move (2 samples, 11.76%)</title><rect x="64.7059%" y="325" width="11.7647%" height="15" fill="rgb(234,100,100)" fg:x="11" fg:w="2"/><text x="64.8559%" y="335.50">crab_engine::Board::can_move</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 5.88%)</title><rect x="70.5882%" y="309" width="5.8824%" height="15" fill="rgb(228,91,91)" fg:x="12" fg:w="1"/><text x="70.7382%" y="319.50">core::iter::tr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="70.5882%" y="293" width="5.8824%" height="15" fill="rgb(235,101,101)" fg:x="12" fg:w="1"/><text x="70.7382%" y="303.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="70.5882%" y="277" width="5.8824%" height="15" fill="rgb(219,78,78)" fg:x="12" fg:w="1"/><text x="70.7382%" y="287.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="70.5882%" y="261" width="5.8824%" height="15" fill="rgb(202,54,54)" fg:x="12" fg:w="1"/><text x="70.7382%" y="271.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 5.88%)</title><rect x="70.5882%" y="245" width="5.8824%" height="15" fill="rgb(200,50,50)" fg:x="12" fg:w="1"/><text x="70.7382%" y="255.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 5.88%)</title><rect x="70.5882%" y="229" width="5.8824%" height="15" fill="rgb(211,66,66)" fg:x="12" fg:w="1"/><text x="70.7382%" y="239.50">alloc::vec::Ve..</text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 5.88%)</title><rect x="70.5882%" y="213" width="5.8824%" height="15" fill="rgb(202,53,53)" fg:x="12" fg:w="1"/><text x="70.7382%" y="223.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 5.88%)</title><rect x="70.5882%" y="197" width="5.8824%" height="15" fill="rgb(254,129,129)" fg:x="12" fg:w="1"/><text x="70.7382%" y="207.50">&lt;core::iter::a..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 5.88%)</title><rect x="70.5882%" y="181" width="5.8824%" height="15" fill="rgb(235,101,101)" fg:x="12" fg:w="1"/><text x="70.7382%" y="191.50">&lt;core::slice::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 5.88%)</title><rect x="70.5882%" y="165" width="5.8824%" height="15" fill="rgb(216,73,73)" fg:x="12" fg:w="1"/><text x="70.7382%" y="175.50">core::ops::fun..</text></g><g><title>crab_engine::Board::can_move::{{closure}} (1 samples, 5.88%)</title><rect x="70.5882%" y="149" width="5.8824%" height="15" fill="rgb(223,84,84)" fg:x="12" fg:w="1"/><text x="70.7382%" y="159.50">crab_engine::B..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 5.88%)</title><rect x="70.5882%" y="133" width="5.8824%" height="15" fill="rgb(233,98,98)" fg:x="12" fg:w="1"/><text x="70.7382%" y="143.50">&lt;core::slice::..</text></g><g><title>crab_engine::Board::can_move::{{closure}}::{{closure}} (1 samples, 5.88%)</title><rect x="70.5882%" y="117" width="5.8824%" height="15" fill="rgb(218,77,77)" fg:x="12" fg:w="1"/><text x="70.7382%" y="127.50">crab_engine::B..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="1045" width="41.1765%" height="15" fill="rgb(242,111,111)" fg:x="7" fg:w="7"/><text x="41.3265%" y="1055.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="1029" width="41.1765%" height="15" fill="rgb(215,71,71)" fg:x="7" fg:w="7"/><text x="41.3265%" y="1039.50">&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="1013" width="41.1765%" height="15" fill="rgb(236,103,103)" fg:x="7" fg:w="7"/><text x="41.3265%" y="1023.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="997" width="41.1765%" height="15" fill="rgb(208,62,62)" fg:x="7" fg:w="7"/><text x="41.3265%" y="1007.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="981" width="41.1765%" height="15" fill="rgb(227,90,90)" fg:x="7" fg:w="7"/><text x="41.3265%" y="991.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="965" width="41.1765%" height="15" fill="rgb(212,68,68)" fg:x="7" fg:w="7"/><text x="41.3265%" y="975.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (7 samples, 41.18%)</title><rect x="41.1765%" y="949" width="41.1765%" height="15" fill="rgb(220,79,79)" fg:x="7" fg:w="7"/><text x="41.3265%" y="959.50">core::iter::adapters::filter_map::filter_map_fold::{{closure}}</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (7 samples, 41.18%)</title><rect x="41.1765%" y="933" width="41.1765%" height="15" fill="rgb(228,90,90)" fg:x="7" fg:w="7"/><text x="41.3265%" y="943.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{cl..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="917" width="41.1765%" height="15" fill="rgb(210,65,65)" fg:x="7" fg:w="7"/><text x="41.3265%" y="927.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7 samples, 41.18%)</title><rect x="41.1765%" y="901" width="41.1765%" height="15" fill="rgb(209,63,63)" fg:x="7" fg:w="7"/><text x="41.3265%" y="911.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (7 samples, 41.18%)</title><rect x="41.1765%" y="885" width="41.1765%" height="15" fill="rgb(250,123,123)" fg:x="7" fg:w="7"/><text x="41.3265%" y="895.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>crab_engine::deepblue::GameState::best_move::{{closure}} (7 samples, 41.18%)</title><rect x="41.1765%" y="869" width="41.1765%" height="15" fill="rgb(219,77,77)" fg:x="7" fg:w="7"/><text x="41.3265%" y="879.50">crab_engine::deepblue::GameState::best_move::{{closure}}</text></g><g><title>crab_engine::deepblue::GameState::minimax (7 samples, 41.18%)</title><rect x="41.1765%" y="853" width="41.1765%" height="15" fill="rgb(223,83,83)" fg:x="7" fg:w="7"/><text x="41.3265%" y="863.50">crab_engine::deepblue::GameState::minimax</text></g><g><title>crab_engine::deepblue::maxormin (7 samples, 41.18%)</title><rect x="41.1765%" y="837" width="41.1765%" height="15" fill="rgb(251,124,124)" fg:x="7" fg:w="7"/><text x="41.3265%" y="847.50">crab_engine::deepblue::maxormin</text></g><g><title>core::iter::traits::iterator::Iterator::min (7 samples, 41.18%)</title><rect x="41.1765%" y="821" width="41.1765%" height="15" fill="rgb(219,78,78)" fg:x="7" fg:w="7"/><text x="41.3265%" y="831.50">core::iter::traits::iterator::Iterator::min</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (7 samples, 41.18%)</title><rect x="41.1765%" y="805" width="41.1765%" height="15" fill="rgb(245,116,116)" fg:x="7" fg:w="7"/><text x="41.3265%" y="815.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (7 samples, 41.18%)</title><rect x="41.1765%" y="789" width="41.1765%" height="15" fill="rgb(250,124,124)" fg:x="7" fg:w="7"/><text x="41.3265%" y="799.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="773" width="41.1765%" height="15" fill="rgb(229,92,92)" fg:x="7" fg:w="7"/><text x="41.3265%" y="783.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="757" width="41.1765%" height="15" fill="rgb(252,126,126)" fg:x="7" fg:w="7"/><text x="41.3265%" y="767.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="741" width="41.1765%" height="15" fill="rgb(216,73,73)" fg:x="7" fg:w="7"/><text x="41.3265%" y="751.50">&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 41.18%)</title><rect x="41.1765%" y="725" width="41.1765%" height="15" fill="rgb(204,55,55)" fg:x="7" fg:w="7"/><text x="41.3265%" y="735.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 5.88%)</title><rect x="76.4706%" y="709" width="5.8824%" height="15" fill="rgb(229,93,93)" fg:x="13" fg:w="1"/><text x="76.6206%" y="719.50">core::iter::tr..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 5.88%)</title><rect x="76.4706%" y="693" width="5.8824%" height="15" fill="rgb(240,109,109)" fg:x="13" fg:w="1"/><text x="76.6206%" y="703.50">core::ops::fun..</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (1 samples, 5.88%)</title><rect x="76.4706%" y="677" width="5.8824%" height="15" fill="rgb(239,107,107)" fg:x="13" fg:w="1"/><text x="76.6206%" y="687.50">core::iter::ad..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 5.88%)</title><rect x="76.4706%" y="661" width="5.8824%" height="15" fill="rgb(251,125,125)" fg:x="13" fg:w="1"/><text x="76.6206%" y="671.50">core::iter::ad..</text></g><g><title>crab_engine::deepblue::GameState::minimax::{{closure}} (1 samples, 5.88%)</title><rect x="76.4706%" y="645" width="5.8824%" height="15" fill="rgb(227,90,90)" fg:x="13" fg:w="1"/><text x="76.6206%" y="655.50">crab_engine::d..</text></g><g><title>crab_engine::deepblue::GameState::minimax (1 samples, 5.88%)</title><rect x="76.4706%" y="629" width="5.8824%" height="15" fill="rgb(223,84,84)" fg:x="13" fg:w="1"/><text x="76.6206%" y="639.50">crab_engine::d..</text></g><g><title>crab_engine::deepblue::maxormin (1 samples, 5.88%)</title><rect x="76.4706%" y="613" width="5.8824%" height="15" fill="rgb(202,53,53)" fg:x="13" fg:w="1"/><text x="76.6206%" y="623.50">crab_engine::d..</text></g><g><title>core::iter::traits::iterator::Iterator::max (1 samples, 5.88%)</title><rect x="76.4706%" y="597" width="5.8824%" height="15" fill="rgb(234,99,99)" fg:x="13" fg:w="1"/><text x="76.6206%" y="607.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::max_by (1 samples, 5.88%)</title><rect x="76.4706%" y="581" width="5.8824%" height="15" fill="rgb(223,83,83)" fg:x="13" fg:w="1"/><text x="76.6206%" y="591.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 5.88%)</title><rect x="76.4706%" y="565" width="5.8824%" height="15" fill="rgb(249,122,122)" fg:x="13" fg:w="1"/><text x="76.6206%" y="575.50">core::iter::tr..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="76.4706%" y="549" width="5.8824%" height="15" fill="rgb(239,107,107)" fg:x="13" fg:w="1"/><text x="76.6206%" y="559.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="76.4706%" y="533" width="5.8824%" height="15" fill="rgb(230,94,94)" fg:x="13" fg:w="1"/><text x="76.6206%" y="543.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="76.4706%" y="517" width="5.8824%" height="15" fill="rgb(204,56,56)" fg:x="13" fg:w="1"/><text x="76.6206%" y="527.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="76.4706%" y="501" width="5.8824%" height="15" fill="rgb(225,87,87)" fg:x="13" fg:w="1"/><text x="76.6206%" y="511.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="76.4706%" y="485" width="5.8824%" height="15" fill="rgb(206,60,60)" fg:x="13" fg:w="1"/><text x="76.6206%" y="495.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="76.4706%" y="469" width="5.8824%" height="15" fill="rgb(253,127,127)" fg:x="13" fg:w="1"/><text x="76.6206%" y="479.50">&lt;core::iter::a..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 5.88%)</title><rect x="76.4706%" y="453" width="5.8824%" height="15" fill="rgb(205,57,57)" fg:x="13" fg:w="1"/><text x="76.6206%" y="463.50">core::iter::tr..</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (1 samples, 5.88%)</title><rect x="76.4706%" y="437" width="5.8824%" height="15" fill="rgb(205,58,58)" fg:x="13" fg:w="1"/><text x="76.6206%" y="447.50">core::iter::ad..</text></g><g><title>crab_engine::deepblue::GameState::get_valid_moves::{{closure}} (1 samples, 5.88%)</title><rect x="76.4706%" y="421" width="5.8824%" height="15" fill="rgb(201,51,51)" fg:x="13" fg:w="1"/><text x="76.6206%" y="431.50">crab_engine::d..</text></g><g><title>crab_engine::Board::can_move (1 samples, 5.88%)</title><rect x="76.4706%" y="405" width="5.8824%" height="15" fill="rgb(219,78,78)" fg:x="13" fg:w="1"/><text x="76.6206%" y="415.50">crab_engine::B..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 5.88%)</title><rect x="76.4706%" y="389" width="5.8824%" height="15" fill="rgb(216,74,74)" fg:x="13" fg:w="1"/><text x="76.6206%" y="399.50">core::iter::tr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="76.4706%" y="373" width="5.8824%" height="15" fill="rgb(216,73,73)" fg:x="13" fg:w="1"/><text x="76.6206%" y="383.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="76.4706%" y="357" width="5.8824%" height="15" fill="rgb(244,115,115)" fg:x="13" fg:w="1"/><text x="76.6206%" y="367.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="76.4706%" y="341" width="5.8824%" height="15" fill="rgb(227,89,89)" fg:x="13" fg:w="1"/><text x="76.6206%" y="351.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 5.88%)</title><rect x="76.4706%" y="325" width="5.8824%" height="15" fill="rgb(246,117,117)" fg:x="13" fg:w="1"/><text x="76.6206%" y="335.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 5.88%)</title><rect x="76.4706%" y="309" width="5.8824%" height="15" fill="rgb(225,87,87)" fg:x="13" fg:w="1"/><text x="76.6206%" y="319.50">alloc::vec::Ve..</text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 5.88%)</title><rect x="76.4706%" y="293" width="5.8824%" height="15" fill="rgb(241,110,110)" fg:x="13" fg:w="1"/><text x="76.6206%" y="303.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 5.88%)</title><rect x="76.4706%" y="277" width="5.8824%" height="15" fill="rgb(227,89,89)" fg:x="13" fg:w="1"/><text x="76.6206%" y="287.50">&lt;core::iter::a..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 5.88%)</title><rect x="76.4706%" y="261" width="5.8824%" height="15" fill="rgb(238,105,105)" fg:x="13" fg:w="1"/><text x="76.6206%" y="271.50">&lt;core::slice::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 5.88%)</title><rect x="76.4706%" y="245" width="5.8824%" height="15" fill="rgb(241,110,110)" fg:x="13" fg:w="1"/><text x="76.6206%" y="255.50">core::ops::fun..</text></g><g><title>crab_engine::Board::can_move::{{closure}} (1 samples, 5.88%)</title><rect x="76.4706%" y="229" width="5.8824%" height="15" fill="rgb(205,58,58)" fg:x="13" fg:w="1"/><text x="76.6206%" y="239.50">crab_engine::B..</text></g><g><title>crab_engine::Board::can_move::{{closure}} (1 samples, 5.88%)</title><rect x="76.4706%" y="213" width="5.8824%" height="15" fill="rgb(228,91,91)" fg:x="13" fg:w="1"/><text x="76.6206%" y="223.50">crab_engine::B..</text></g><g><title>__libc_start_main (8 samples, 47.06%)</title><rect x="41.1765%" y="1365" width="47.0588%" height="15" fill="rgb(217,75,75)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1375.50">__libc_start_main</text></g><g><title>main (8 samples, 47.06%)</title><rect x="41.1765%" y="1349" width="47.0588%" height="15" fill="rgb(216,74,74)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1359.50">main</text></g><g><title>std::rt::lang_start_internal (8 samples, 47.06%)</title><rect x="41.1765%" y="1333" width="47.0588%" height="15" fill="rgb(230,93,93)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1343.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8 samples, 47.06%)</title><rect x="41.1765%" y="1317" width="47.0588%" height="15" fill="rgb(208,62,62)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1327.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8 samples, 47.06%)</title><rect x="41.1765%" y="1301" width="47.0588%" height="15" fill="rgb(229,93,93)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1311.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8 samples, 47.06%)</title><rect x="41.1765%" y="1285" width="47.0588%" height="15" fill="rgb(203,54,54)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1295.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (8 samples, 47.06%)</title><rect x="41.1765%" y="1269" width="47.0588%" height="15" fill="rgb(231,95,95)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1279.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (8 samples, 47.06%)</title><rect x="41.1765%" y="1253" width="47.0588%" height="15" fill="rgb(211,67,67)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1263.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8 samples, 47.06%)</title><rect x="41.1765%" y="1237" width="47.0588%" height="15" fill="rgb(243,113,113)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1247.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8 samples, 47.06%)</title><rect x="41.1765%" y="1221" width="47.0588%" height="15" fill="rgb(203,54,54)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1231.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8 samples, 47.06%)</title><rect x="41.1765%" y="1205" width="47.0588%" height="15" fill="rgb(254,129,129)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1215.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (8 samples, 47.06%)</title><rect x="41.1765%" y="1189" width="47.0588%" height="15" fill="rgb(213,69,69)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1199.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 47.06%)</title><rect x="41.1765%" y="1173" width="47.0588%" height="15" fill="rgb(202,53,53)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1183.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8 samples, 47.06%)</title><rect x="41.1765%" y="1157" width="47.0588%" height="15" fill="rgb(214,70,70)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1167.50">core::ops::function::FnOnce::call_once</text></g><g><title>lib::main (8 samples, 47.06%)</title><rect x="41.1765%" y="1141" width="47.0588%" height="15" fill="rgb(229,92,92)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1151.50">lib::main</text></g><g><title>crab_engine::deepblue::GameState::best_move (8 samples, 47.06%)</title><rect x="41.1765%" y="1125" width="47.0588%" height="15" fill="rgb(226,88,88)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1135.50">crab_engine::deepblue::GameState::best_move</text></g><g><title>crab_engine::deepblue::maxormin (8 samples, 47.06%)</title><rect x="41.1765%" y="1109" width="47.0588%" height="15" fill="rgb(204,56,56)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1119.50">crab_engine::deepblue::maxormin</text></g><g><title>core::iter::traits::iterator::Iterator::max (8 samples, 47.06%)</title><rect x="41.1765%" y="1093" width="47.0588%" height="15" fill="rgb(209,64,64)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1103.50">core::iter::traits::iterator::Iterator::max</text></g><g><title>core::iter::traits::iterator::Iterator::max_by (8 samples, 47.06%)</title><rect x="41.1765%" y="1077" width="47.0588%" height="15" fill="rgb(229,93,93)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1087.50">core::iter::traits::iterator::Iterator::max_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (8 samples, 47.06%)</title><rect x="41.1765%" y="1061" width="47.0588%" height="15" fill="rgb(229,93,93)" fg:x="7" fg:w="8"/><text x="41.3265%" y="1071.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 5.88%)</title><rect x="82.3529%" y="1045" width="5.8824%" height="15" fill="rgb(223,84,84)" fg:x="14" fg:w="1"/><text x="82.5029%" y="1055.50">&lt;core::iter::a..</text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 5.88%)</title><rect x="82.3529%" y="1029" width="5.8824%" height="15" fill="rgb(244,114,114)" fg:x="14" fg:w="1"/><text x="82.5029%" y="1039.50">core::option::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 5.88%)</title><rect x="82.3529%" y="1013" width="5.8824%" height="15" fill="rgb(249,122,122)" fg:x="14" fg:w="1"/><text x="82.5029%" y="1023.50">core::ops::fun..</text></g><g><title>crab_engine::deepblue::GameState::best_move::{{closure}} (1 samples, 5.88%)</title><rect x="82.3529%" y="997" width="5.8824%" height="15" fill="rgb(247,119,119)" fg:x="14" fg:w="1"/><text x="82.5029%" y="1007.50">crab_engine::d..</text></g><g><title>crab_engine::deepblue::GameState::minimax (1 samples, 5.88%)</title><rect x="82.3529%" y="981" width="5.8824%" height="15" fill="rgb(248,119,119)" fg:x="14" fg:w="1"/><text x="82.5029%" y="991.50">crab_engine::d..</text></g><g><title>crab_engine::deepblue::maxormin (1 samples, 5.88%)</title><rect x="82.3529%" y="965" width="5.8824%" height="15" fill="rgb(211,66,66)" fg:x="14" fg:w="1"/><text x="82.5029%" y="975.50">crab_engine::d..</text></g><g><title>core::iter::traits::iterator::Iterator::min (1 samples, 5.88%)</title><rect x="82.3529%" y="949" width="5.8824%" height="15" fill="rgb(208,62,62)" fg:x="14" fg:w="1"/><text x="82.5029%" y="959.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1 samples, 5.88%)</title><rect x="82.3529%" y="933" width="5.8824%" height="15" fill="rgb(207,61,61)" fg:x="14" fg:w="1"/><text x="82.5029%" y="943.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 5.88%)</title><rect x="82.3529%" y="917" width="5.8824%" height="15" fill="rgb(248,120,120)" fg:x="14" fg:w="1"/><text x="82.5029%" y="927.50">core::iter::tr..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="82.3529%" y="901" width="5.8824%" height="15" fill="rgb(224,85,85)" fg:x="14" fg:w="1"/><text x="82.5029%" y="911.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="82.3529%" y="885" width="5.8824%" height="15" fill="rgb(226,88,88)" fg:x="14" fg:w="1"/><text x="82.5029%" y="895.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="82.3529%" y="869" width="5.8824%" height="15" fill="rgb(217,75,75)" fg:x="14" fg:w="1"/><text x="82.5029%" y="879.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="82.3529%" y="853" width="5.8824%" height="15" fill="rgb(223,84,84)" fg:x="14" fg:w="1"/><text x="82.5029%" y="863.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="82.3529%" y="837" width="5.8824%" height="15" fill="rgb(205,57,57)" fg:x="14" fg:w="1"/><text x="82.5029%" y="847.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 5.88%)</title><rect x="82.3529%" y="821" width="5.8824%" height="15" fill="rgb(239,107,107)" fg:x="14" fg:w="1"/><text x="82.5029%" y="831.50">&lt;core::iter::a..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 5.88%)</title><rect x="82.3529%" y="805" width="5.8824%" height="15" fill="rgb(206,58,58)" fg:x="14" fg:w="1"/><text x="82.5029%" y="815.50">core::iter::tr..</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (1 samples, 5.88%)</title><rect x="82.3529%" y="789" width="5.8824%" height="15" fill="rgb(225,86,86)" fg:x="14" fg:w="1"/><text x="82.5029%" y="799.50">core::iter::ad..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (1 samples, 5.88%)</title><rect x="82.3529%" y="773" width="5.8824%" height="15" fill="rgb(209,63,63)" fg:x="14" fg:w="1"/><text x="82.5029%" y="783.50">&lt;core::iter::a..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 5.88%)</title><rect x="82.3529%" y="757" width="5.8824%" height="15" fill="rgb(216,73,73)" fg:x="14" fg:w="1"/><text x="82.5029%" y="767.50">core::iter::tr..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 5.88%)</title><rect x="82.3529%" y="741" width="5.8824%" height="15" fill="rgb(201,52,52)" fg:x="14" fg:w="1"/><text x="82.5029%" y="751.50">core::ops::fun..</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (1 samples, 5.88%)</title><rect x="82.3529%" y="725" width="5.8824%" height="15" fill="rgb(204,57,57)" fg:x="14" fg:w="1"/><text x="82.5029%" y="735.50">core::iter::ad..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 5.88%)</title><rect x="82.3529%" y="709" width="5.8824%" height="15" fill="rgb(219,78,78)" fg:x="14" fg:w="1"/><text x="82.5029%" y="719.50">core::iter::ad..</text></g><g><title>crab_engine::deepblue::GameState::minimax::{{closure}} (1 samples, 5.88%)</title><rect x="82.3529%" y="693" width="5.8824%" height="15" fill="rgb(206,59,59)" fg:x="14" fg:w="1"/><text x="82.5029%" y="703.50">crab_engine::d..</text></g><g><title>crab_engine::deepblue::GameState::move_piece (1 samples, 5.88%)</title><rect x="82.3529%" y="677" width="5.8824%" height="15" fill="rgb(244,114,114)" fg:x="14" fg:w="1"/><text x="82.5029%" y="687.50">crab_engine::d..</text></g><g><title>crab_engine::Board::move_piece (1 samples, 5.88%)</title><rect x="82.3529%" y="661" width="5.8824%" height="15" fill="rgb(241,110,110)" fg:x="14" fg:w="1"/><text x="82.5029%" y="671.50">crab_engine::B..</text></g><g><title>crab_engine::Board::can_move (1 samples, 5.88%)</title><rect x="82.3529%" y="645" width="5.8824%" height="15" fill="rgb(248,120,120)" fg:x="14" fg:w="1"/><text x="82.5029%" y="655.50">crab_engine::B..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 5.88%)</title><rect x="82.3529%" y="629" width="5.8824%" height="15" fill="rgb(218,77,77)" fg:x="14" fg:w="1"/><text x="82.5029%" y="639.50">core::iter::tr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="82.3529%" y="613" width="5.8824%" height="15" fill="rgb(230,94,94)" fg:x="14" fg:w="1"/><text x="82.5029%" y="623.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="82.3529%" y="597" width="5.8824%" height="15" fill="rgb(211,67,67)" fg:x="14" fg:w="1"/><text x="82.5029%" y="607.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 5.88%)</title><rect x="82.3529%" y="581" width="5.8824%" height="15" fill="rgb(216,73,73)" fg:x="14" fg:w="1"/><text x="82.5029%" y="591.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 5.88%)</title><rect x="82.3529%" y="565" width="5.8824%" height="15" fill="rgb(220,79,79)" fg:x="14" fg:w="1"/><text x="82.5029%" y="575.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 5.88%)</title><rect x="82.3529%" y="549" width="5.8824%" height="15" fill="rgb(210,65,65)" fg:x="14" fg:w="1"/><text x="82.5029%" y="559.50">alloc::vec::Ve..</text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 5.88%)</title><rect x="82.3529%" y="533" width="5.8824%" height="15" fill="rgb(237,103,103)" fg:x="14" fg:w="1"/><text x="82.5029%" y="543.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 5.88%)</title><rect x="82.3529%" y="517" width="5.8824%" height="15" fill="rgb(213,69,69)" fg:x="14" fg:w="1"/><text x="82.5029%" y="527.50">&lt;core::iter::a..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 5.88%)</title><rect x="82.3529%" y="501" width="5.8824%" height="15" fill="rgb(200,50,50)" fg:x="14" fg:w="1"/><text x="82.5029%" y="511.50">&lt;core::slice::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 5.88%)</title><rect x="82.3529%" y="485" width="5.8824%" height="15" fill="rgb(207,60,60)" fg:x="14" fg:w="1"/><text x="82.5029%" y="495.50">core::ops::fun..</text></g><g><title>crab_engine::Board::can_move::{{closure}} (1 samples, 5.88%)</title><rect x="82.3529%" y="469" width="5.8824%" height="15" fill="rgb(218,77,77)" fg:x="14" fg:w="1"/><text x="82.5029%" y="479.50">crab_engine::B..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 5.88%)</title><rect x="82.3529%" y="453" width="5.8824%" height="15" fill="rgb(234,100,100)" fg:x="14" fg:w="1"/><text x="82.5029%" y="463.50">&lt;core::slice::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 5.88%)</title><rect x="82.3529%" y="437" width="5.8824%" height="15" fill="rgb(205,57,57)" fg:x="14" fg:w="1"/><text x="82.5029%" y="447.50">&lt;core::slice::..</text></g><g><title>__GI___tunables_init (1 samples, 5.88%)</title><rect x="88.2353%" y="1333" width="5.8824%" height="15" fill="rgb(240,108,108)" fg:x="15" fg:w="1"/><text x="88.3853%" y="1343.50">__GI___tunable..</text></g><g><title>all (17 samples, 100%)</title><rect x="0.0000%" y="1413" width="100.0000%" height="15" fill="rgb(237,103,103)" fg:x="0" fg:w="17"/><text x="0.1500%" y="1423.50"></text></g><g><title>lib (17 samples, 100.00%)</title><rect x="0.0000%" y="1397" width="100.0000%" height="15" fill="rgb(251,125,125)" fg:x="0" fg:w="17"/><text x="0.1500%" y="1407.50">lib</text></g><g><title>_start (15 samples, 88.24%)</title><rect x="11.7647%" y="1381" width="88.2353%" height="15" fill="rgb(201,51,51)" fg:x="2" fg:w="15"/><text x="11.9147%" y="1391.50">_start</text></g><g><title>_dl_start (2 samples, 11.76%)</title><rect x="88.2353%" y="1365" width="11.7647%" height="15" fill="rgb(224,85,85)" fg:x="15" fg:w="2"/><text x="88.3853%" y="1375.50">_dl_start</text></g><g><title>_dl_sysdep_start (2 samples, 11.76%)</title><rect x="88.2353%" y="1349" width="11.7647%" height="15" fill="rgb(223,84,84)" fg:x="15" fg:w="2"/><text x="88.3853%" y="1359.50">_dl_sysdep_start</text></g><g><title>dl_main (1 samples, 5.88%)</title><rect x="94.1176%" y="1333" width="5.8824%" height="15" fill="rgb(236,102,102)" fg:x="16" fg:w="1"/><text x="94.2676%" y="1343.50">dl_main</text></g><g><title>init_tls (1 samples, 5.88%)</title><rect x="94.1176%" y="1317" width="5.8824%" height="15" fill="rgb(248,119,119)" fg:x="16" fg:w="1"/><text x="94.2676%" y="1327.50">init_tls</text></g><g><title>_dl_allocate_tls_storage (1 samples, 5.88%)</title><rect x="94.1176%" y="1301" width="5.8824%" height="15" fill="rgb(205,57,57)" fg:x="16" fg:w="1"/><text x="94.2676%" y="1311.50">_dl_allocate_t..</text></g></svg></svg>